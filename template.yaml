AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: IoT FeedBack

Metadata:
  AWS::ServerlessRepo::Application:
    Name: IoT-Session-Feedback
    Description: "Session Feedback Engine Using Serverless and IoT Buttons"
    Author: Eric Johnson
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels:
      - Serverless
      - IoT
      - Feedback
      - Node
    HomePageUrl: https://github.com/singledigit/IoT-feedback
    SemanticVersion: 0.0.7
    SourceCodeUrl: https://github.com/singledigit/IoT-feedback/releases/tag/v0.0.7

Mappings: 
  RegionMap: 
    us-east-1:
        layer: arn:aws:lambda:us-east-1:700336187521:layer:aws-sdk:5
    us-west-2:
        layer: arn:aws:lambda:us-west-2:700336187521:layer:aws-sdk:5
    eu-central-1:
        layer: arn:aws:lambda:eu-central-1:700336187521:layer:aws-sdk:1

Globals:
    Function:
        Timeout: 3
        Runtime: nodejs8.10
        Layers:
          - !FindInMap [RegionMap, !Ref "AWS::Region", layer]
        Environment:
            Variables:
                TABLE_NAME: !Ref FeedBackTable
                SESSION_PARAMETER: !Ref SessionNameParameter
    Api:
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

Parameters:
    IoTRuleTopic:
        Type: String
        Description: IoT Rule Topic to be monitored for IoT Buttons. Default is 'iotbutton/+' which monitors all buttons tied to account.
        Default: iotbutton/+
    SessionName:
        Type: String
        Description: Name of session for feedback. This will be stored in the Parameter Store and can be updated to create new sessions
        Default: My Session

Resources:
    SessionNameParameter:
        Type: AWS::SSM::Parameter
        Properties:
            Value: !Ref SessionName
            Type: String

    GetFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: get/
            Handler: app.lambdaHandler
            Policies:
              - DynamoDBReadPolicy: {
                    TableName: !Ref FeedBackTable
                }
              - SSMParameterReadPolicy: {
                    ParameterName: !Ref SessionNameParameter
                }
            Events:
                WebGet:
                    Type: Api
                    Properties:
                        Path: /
                        Method: get

    PostFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: post/
            Handler: app.lambdaHandler
            Policies:
              - DynamoDBCrudPolicy: {
                    TableName: !Ref FeedBackTable
                }
              - SSMParameterReadPolicy: {
                    ParameterName: !Ref SessionNameParameter
                }
            Events:
                # ButtonClick:
                #     Type: IoTRule
                #     Properties:
                #         Sql: !Sub "SELECT * FROM '${IoTRuleTopic}'"
                #         AwsIotSqlVersion: '2016-03-23'
                WebPost:
                    Type: Api
                    Properties:
                        Path: /
                        Method: post

    FeedBackTable:
        Type: AWS::Serverless::SimpleTable

Outputs:
    WebGetApi:
        Description: "API Gateway endpoint URL for Prod stage for Hello World function"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

    FeedBackTableName:
        Description: "Table Name for data"
        Value: !Ref FeedBackTable

    SessionParameterName:
        Description: Parameter Name that holds the session name
        Value: !Ref SessionNameParameter